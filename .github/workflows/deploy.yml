name: Build, Push, and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/jobformbot
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH and restart container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/jobformbot:latest"
            CONTAINER_NAME="farma-bot"

            echo "Logging into Docker Hub (if needed)..."
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin || true

            echo "Pulling latest image: $IMAGE"
            docker pull "$IMAGE"

            echo "Stopping and removing existing container (if exists)"
            docker rm -f "$CONTAINER_NAME" || true

            echo "Starting new container..."
            # Adjust volume mounts and env-file path as needed on your EC2 host
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              --env-file /home/ubuntu/JobFormBot/.env \
              "$IMAGE"

            echo "Pruning unused images..."
            docker image prune -af || true
